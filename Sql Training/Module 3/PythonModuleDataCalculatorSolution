import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Calculate OAT (Outside Air Temperature)
def compute_y(hour):
    return (1 + 0.6 * (np.sin(hour / 100) + 1)) * (5 * np.sin((hour / 3.822) - 2) + 25)

# Constants
hours_in_day = 24
days_in_month = 30
total_hours = hours_in_day * days_in_month  # Total hours in the month
occupied_temp = 70  # Temperature during occupied hours
unoccupied_temp = 60  # Temperature during unoccupied hours
preheat_duration = 2  # Preheat duration (hours)
cooling_duration = 10  # Cooling duration (hours)

# Generate hours for the entire month
hours = np.arange(0, total_hours)
temperature = np.zeros_like(hours, dtype=float)

# Function to simulate temperature change
def get_temperature_at_hour(hour, current_temp, oat, preheat_duration, cooling_duration):
    hour_in_day = hour % 24  # Hour of the current day
    if hour_in_day == 5:  # Preheat period (5 AM to 6 AM)
        temperature_change = (occupied_temp - current_temp) / preheat_duration
        return current_temp + temperature_change
    elif hour_in_day == 18:  # Cooling period (6 PM to 7 PM)
        temperature_change = (current_temp - unoccupied_temp) / cooling_duration
        return current_temp - temperature_change
    elif 6 <= hour_in_day < 18:  # Occupied hours (6 AM to 6 PM)
        return occupied_temp
    elif hour_in_day >= 19 or hour_in_day < 5:  # Unoccupied hours (7 PM to 5 AM)
        if current_temp <= 60:
            return unoccupied_temp
        else:
            temperature_change = (current_temp - oat) / cooling_duration
            return current_temp - temperature_change

# Initialize the internal temperature
internal_temp = 60  # Assume starting at OAT at midnight

# Populate temperature for each hour of the month
oat_values = []
for i, hour in enumerate(hours):
    # Calculate OAT based on hour
    oat = compute_y(hour)
    oat_values.append(oat)
    internal_temp = get_temperature_at_hour(hour, internal_temp, oat, preheat_duration, cooling_duration)
    temperature[i] = internal_temp

# Create a DataFrame with hours, internal temperature, and OAT
df = pd.DataFrame({
    "Hour": hours,
    "Internal Temperature (°F)": temperature,
    "OAT (Outside Air Temperature) (°F)": oat_values
})

# Save the DataFrame to a CSV file
df.to_csv("temperature_data.csv", index=False, float_format="%.2f")

# Plotting the results
plt.figure(figsize=(14, 8))
plt.plot(hours, temperature, label="Internal Temperature", color='blue')
plt.plot(hours, oat_values, label="OAT (Outside Air Temperature)", linestyle='--', color='orange')
plt.xlabel('Hour (0 = Midnight Day 1)')
plt.ylabel('Temperature (°F)')
plt.title('Building Temperature & OAT')
plt.legend()
plt.grid(True)
plt.show()